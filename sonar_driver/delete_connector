#!/usr/bin/env python

import sys
import os
import traceback
import argparse

from print_utils import pretty_print
from kafka_connect_session import KafkaConnectSession

def parse_args():
    """ Parse arguments """

    parser = argparse.ArgumentParser(
            description="Deletes running Kafka connectors.",
            formatter_class=argparse.RawTextHelpFormatter)

    parser.add_argument('-d', '--dry', action="store_true", required=False,
            help="dry run")
    parser.add_argument('-g', '--debug', action="store_true", required=False,
            help="debug this script")
    parser.add_argument('-k', '--kafka-rest-url', default="localhost", required=False,
            help="URL of kafka rest endpoint (default localhost)")
    parser.add_argument('-kp', '--kafka-rest-port', default="8083", required=False,
            help="Port of kafka rest endpoint (default 8083)")
    parser.add_argument('-a', '--all', action="store_true", required=False,
            help="Delete all connectors")

    parser.add_argument('connectors', nargs='*', default=None, help="Avro schema file")

    args = parser.parse_args()

    if args.debug:
        pretty_print("Arguments passed", args.__dict__)

    if not args.all and args.connectors is None:
        raise argparse.ArgumentTypeError("No connectors defined!")

    return args


def main():
    """ Main entrypoint """

    args = parse_args()

    try:

        # Initialize Kafka Connect REST session
        kafka_connect_session = KafkaConnectSession(
            args.dry, 
            args.debug, 
            args.kafka_rest_url,
            args.kafka_rest_port
        )

        # Get connectors to delete
        if args.all:
            if not args.dry:
                connectors = kafka_connect_session.request('GET', '/connectors', 200).json()
            else:
                connectors = ['all', 'of', 'them']
        else:
            connectors = args.connectors
        pretty_print("Deleting connectors", connectors)

        # Issue DELETE for each
        for connector in connectors:
            kafka_connect_session.request('DELETE', '/connectors/' + connector, 204)

        # Get remaining connectors
        if not args.dry:
            connectors = kafka_connect_session.request('GET', '/connectors', 200).json()
        else:
            connectors = []
        pretty_print("Connectors remaining", connectors)

    except Exception as e:
        exc_type, exc_value, exc_traceback = sys.exc_info()
        traceback.print_exception(exc_type, exc_value, exc_traceback, limit=2, file=sys.stderr)
        return 1


if __name__ == '__main__':
    main()
