#!/usr/bin/env python

import os
import sys
import traceback
import json
import argparse

from sonar_driver.print_utils import pretty_print
from sonar_driver.kafka_connect.session import KafkaConnectSession

def parse_args():
    """ Parse arguments """

    parser = argparse.ArgumentParser(
            description="Installs Kafka connectors to a running Kafka Connect instance",
            formatter_class=argparse.RawTextHelpFormatter)

    parser.add_argument('-d', '--dry', action="store_true", required=False,
            help="dry run")
    parser.add_argument('-g', '--debug', action="store_true", required=False,
            help="debug this script")
    parser.add_argument('-k', '--kafka-rest-url', default=os.environ.get("KAFKA_REST_URL", "localhost"), required=False,
            help="URL of kafka rest endpoint (default: value of KAFKA_REST_URL or 'localhost')")
    parser.add_argument('-kp', '--kafka-rest-port', default=os.environ.get("KAFKA_REST_PORT", "8083"), required=False,
            help="Port of kafka rest endpoint (default: value of KAFKA_REST_PORT or 8083)")

    parser.add_argument('connector_files', nargs='+', default=None, help="Connector json files to install, '-' to pipe from stdin.")

    args = parser.parse_args()

    if args.debug:
        pretty_print(args.__dict__, title="Arguments passed")

    args.connector_files = set(args.connector_files) # remove dupes

    return args


def main():
    """ Main entrypoint """

    args = parse_args()

    try:

        kafka_connect_session = KafkaConnectSession(
            args.kafka_rest_url,
            args.kafka_rest_port,
            args.debug, 
            args.dry
        )

        # Read into json and install each connector
        for connector_filename in args.connector_files:
            if connector_filename == '-':
                connector_json = json.load(sys.stdin)
            else:
                with open(connector_filename, 'r') as connector_file:
                    connector_json = json.load(connector_file)
            kafka_connect_session.install_connector(connector_json)
        
    except Exception as e:
        exc_type, exc_value, exc_traceback = sys.exc_info()
        traceback.print_exception(exc_type, exc_value, exc_traceback, limit=2, file=sys.stderr)
        return 1


if __name__ == '__main__':
    main()
