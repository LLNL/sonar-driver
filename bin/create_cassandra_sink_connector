#!/usr/bin/env python

import os
import sys
import time
import argparse
import traceback

from sonar_driver.print_utils import pretty_print
from sonar_driver.connector import Connector
from sonar_driver.cassandra_sink_config import CassandraSinkConfig


def parse_args():
    """ Parse arguments """

    parser = argparse.ArgumentParser(
            description="Creates a Cassandra sink for the specified topic",
            formatter_class=argparse.RawTextHelpFormatter)

    parser.add_argument('-g', '--debug', action="store_true", required=False,
            help="debug this script")
    parser.add_argument('-t', '--tasks-max', default="1", required=False,
            help="maximum number of concurrent ingestion tasks")
    parser.add_argument('-c', '--cassandra-hosts', nargs='+', default=[os.environ.get("CQLSH_HOST", "localhost")], required=False,
            help="Cassandra host to connect to (default: value of CQLSH_HOST or 'localhost')")
    parser.add_argument('-cp', '--cassandra-port', default=os.environ.get("CQLSH_PORT", "9042"), required=False,
            help="Cassandra port to connect to (default: value of CQLSH_PORT or 9042)")
    parser.add_argument('-u', '--cassandra-username', required=True,
            help="Cassandra username to ingest with (REQUIRED)")
    parser.add_argument('-p', '--cassandra-password-file', required=True,
            help="Cassandra password file to authenticate with (REQUIRED)")

    parser.add_argument('topic', help="topic to consume from")
    parser.add_argument('keyspace', type=str, help="Cassandra keyspace to ingest into")
    parser.add_argument('table', type=str, help="Cassandra table to ingest into")

    args = parser.parse_args()

    if args.debug:
        pretty_print(args.__dict__, title="Arguments passed")

    return args


def main():
    """ Main entrypoint """

    args = parse_args()

    try:

        # Create the connector
        cassandra_sink = Connector(
            "cassandra_sink-" + args.topic,
            CassandraSinkConfig(
                args.topic,
                args.keyspace,
                args.table,
                args.cassandra_username,
                args.cassandra_password_file,
                args.cassandra_hosts,
                args.cassandra_port,
                kcql=None, # possible TODO: make this configurable
                tasks_max=args.tasks_max
            )
        )
        
        pretty_print(cassandra_sink.json(), colorize=False)

    except Exception as e:
        exc_type, exc_value, exc_traceback = sys.exc_info()
        traceback.print_exception(exc_type, exc_value, exc_traceback, limit=2, file=sys.stderr)
        return 1


if __name__ == '__main__':
    main()
