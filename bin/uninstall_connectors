#!/usr/bin/env python

import sys
import traceback
import argparse

from sonar_driver.print_utils import pretty_print
from sonar_driver.uninstall_connectors import uninstall_connectors, uninstall_all_connectors

def parse_args():
    """ Parse arguments """

    parser = argparse.ArgumentParser(
            description="Uninstalls running Kafka connectors.",
            formatter_class=argparse.RawTextHelpFormatter)

    parser.add_argument('-d', '--dry', action="store_true", required=False,
            help="dry run")
    parser.add_argument('-g', '--debug', action="store_true", required=False,
            help="debug this script")
    parser.add_argument('-k', '--kafka-rest-url', default=os.environ.get("KAFKA_REST_URL", "localhost"), required=False,
            help="URL of kafka rest endpoint (default: value of KAFKA_REST_URL or 'localhost')")
    parser.add_argument('-kp', '--kafka-rest-port', default=os.environ.get("KAFKA_REST_PORT", "8083"), required=False,
            help="Port of kafka rest endpoint (default: value of KAFKA_REST_PORT or 8083)")
    parser.add_argument('-a', '--all', action="store_true", required=False,
            help="Uninstall all connectors")

    parser.add_argument('connectors', nargs='*', default=None, help="Avro schema file")

    args = parser.parse_args()

    if args.debug:
        pretty_print(args.__dict__, title="Arguments passed")

    if not args.all and not args.connectors:
        raise argparse.ArgumentTypeError("No connectors defined!")

    return args


def main():
    """ Main entrypoint """

    args = parse_args()

    try:
        # Get connectors to uninstall
        if args.all:
            uninstall_all_connectors(
                args.kafka_rest_url,
                args.kafka_rest_port,
                args.debug,
                args.dry
            )
        else:
            uninstall_connectors(
                args.connectors,
                args.kafka_rest_url,
                args.kafka_rest_port,
                args.debug,
                args.dry
            )

    except Exception as e:
        exc_type, exc_value, exc_traceback = sys.exc_info()
        traceback.print_exception(exc_type, exc_value, exc_traceback, limit=2, file=sys.stderr)
        return 1


if __name__ == '__main__':
    main()
