#!/usr/bin/env python

import os
import sys
import time
import argparse
import traceback

import avro.schema

from sonar_driver.print_utils import pretty_print
from sonar_driver.cassandra_session import CassandraSession


def parse_args():
    """ Parse arguments """

    parser = argparse.ArgumentParser(
            description="Creates a Cassandra table from an Avro schema and defined primary key.",
            formatter_class=argparse.RawTextHelpFormatter)

    parser.add_argument('-d', '--dry', action="store_true", required=False,
            help="dry run")
    parser.add_argument('-g', '--debug', action="store_true", required=False,
            help="debug this script")
    parser.add_argument('-c', '--cassandra-hosts', nargs='+', default=[os.environ.get("CQLSH_HOST", "localhost")], required=False,
            help="Cassandra host to connect to (default: value of CQLSH_HOST or 'localhost')")
    parser.add_argument('-cp', '--cassandra-port', default=os.environ.get("CQLSH_PORT", "9042"), required=False,
            help="Cassandra port to connect to (default: value of CQLSH_PORT or 9042)")
    parser.add_argument('-u', '--cassandra-username', required=True,
            help="Cassandra username to ingest with (REQUIRED)")
    parser.add_argument('-p', '--cassandra-password-file', required=True,
            help="Cassandra password file to authenticate with (REQUIRED)")
    parser.add_argument('-pk', '--partition-key', required=True,
            help="one or more partition keys, comma-separated, no spaces (REQUIRED)"
                 "\nexamples:"
                 "\n    partition_key"
                 "\n    partition_key1,partition_key2")
    parser.add_argument('-ck', '--cluster-key', required=False,
            help="one or more cluster keys, comma-separated, no spaces"
                 "\nexamples:"
                 "\n   cluster_key"
                 "\n   cluster_key1,cluster_key2")

    parser.add_argument('keyspace', type=str, help="Cassandra keyspace to create")
    parser.add_argument('table', type=str, help="Cassandra table to create")
    parser.add_argument('avro_schema_file', help="Avro schema of Cassandra table")

    args = parser.parse_args()

    if args.debug:
        pretty_print(args.__dict__, title="Arguments passed")

    return args


def main():
    """ Main entrypoint """

    args = parse_args()

    try:
        # Get avro schema from file
        with open(args.avro_schema_file, 'r') as f:
            avro_schema = avro.schema.Parse(f.read())
        if args.debug:
            pretty_print(avro_schema.to_json(), title="Avro schema")

        # Check if Cassandra table exists, and if not, try to make it
        cassandra_session = CassandraSession(
            args.cassandra_username, 
            args.cassandra_password_file, 
            hosts=args.cassandra_hosts,
            port=args.cassandra_port, 
            dry=args.dry, 
            debug=args.debug
        )
        if not args.dry and cassandra_session.table_exists(args.keyspace, args.table):
            raise Exception("Table {}.{} already exists!".format(args.keyspace, args.table))
        else:
            cassandra_session.create_table_from_avro_schema(
                args.keyspace,
                args.table,
                avro_schema,
                args.partition_key,
                args.cluster_key
            )

    except Exception as e:
        exc_type, exc_value, exc_traceback = sys.exc_info()
        traceback.print_exception(exc_type, exc_value, exc_traceback, limit=2, file=sys.stderr)
        return 1


if __name__ == '__main__':
    main()
