#!/usr/bin/env python

import sys
import argparse
import traceback

import avro.schema

from sonar_driver.print_utils import pretty_print
from sonar_driver.create_ingestor import create_ingestor


def parse_args():
    """ Parse arguments """

    parser = argparse.ArgumentParser(
            description="Creates a ingestor from a directory source to a Cassandra table sink, "
                        "creating the table if it does not yet exist.",
            formatter_class=argparse.RawTextHelpFormatter)

    parser.add_argument('-d', '--dry', action="store_true", required=False,
            help="dry run")
    parser.add_argument('-g', '--debug', action="store_true", required=False,
            help="debug this script")
    parser.add_argument('-f', '--file-format', default="json", required=False,
            help="file format (json|csv)")
    parser.add_argument('-fo', '--format-options', default="{}", required=False,
            help="file format options")
    parser.add_argument('-t', '--tasks-max', default="1", required=False,
            help="maximum number of concurrent ingestion tasks")
    parser.add_argument('-b', '--batch-size', default="10000", required=False,
            help="batch size for file reads")
    parser.add_argument('-i', '--ingest-dir', required=True,
            help="directory to use as ingestion point")
    parser.add_argument('-o', '--completed-dir', required=True,
            help="directory to move ingested files into")
    parser.add_argument('-k', '--kafka-rest-url', default="localhost", required=False,
            help="URL of kafka rest endpoint (default localhost)")
    parser.add_argument('-kp', '--kafka-rest-port', default="8083", required=False,
            help="Port of kafka rest endpoint (default 8083)")
    parser.add_argument('-c', '--cassandra-hosts', nargs='+', default=["localhost"], required=False,
            help="Cassandra host to connect to (default localhost)")
    parser.add_argument('-cp', '--cassandra-port', default="9042", required=False,
            help="Cassandra port to connect to (default 9042)")
    parser.add_argument('-u', '--cassandra-username', required=True,
            help="Cassandra username to ingest with (REQUIRED)")
    parser.add_argument('-p', '--cassandra-password-file', required=True,
            help="Cassandra password file to authenticate with (REQUIRED)")
    parser.add_argument('-pk', '--partition-key', type=str, required=False,
            help="one or more partition keys, comma-separated, no spaces."
                 "\nNOTE: this argument is required if Cassandra table is not yet created"
                 "\nexamples:"
                 "\n    partition_key"
                 "\n    partition_key1,partition_key2")
    parser.add_argument('-ck', '--cluster-key', type=str, required=False,
            help="one or more cluster keys, comma-separated, no spaces"
                 "\nexamples:"
                 "\n   cluster_key"
                 "\n   cluster_key1,cluster_key2")

    parser.add_argument('avro_schema_file', help="Avro schema file")
    parser.add_argument('keyspace', type=str, help="Cassandra keyspace to ingest into")
    parser.add_argument('table', type=str, help="Cassandra table to ingest into")

    args = parser.parse_args()

    if args.debug:
        pretty_print("Arguments passed", args.__dict__)

    return args


def main():
    """ Main entrypoint """

    try:
        args = parse_args()

        # Get avro schema from file
        with open(args.avro_schema_file, 'r') as f:
            avro_schema = avro.schema.Parse(f.read())
        if args.debug:
            pretty_print("Avro schema", avro_schema.to_json())

        create_ingestor(
            avro_schema,
            args.keyspace,
            args.table,
            args.ingest_dir,
            args.completed_dir,
            args.cassandra_username,
            args.cassandra_password_file,
            args.file_format,
            args.format_options,
            args.batch_size,
            args.kafka_rest_url, 
            args.kafka_rest_port, 
            args.cassandra_hosts,
            args.cassandra_port,
            args.partition_key,
            args.cluster_key,
            args.tasks_max,
            args.debug,
            args.dry)

    except Exception as e:
        exc_type, exc_value, exc_traceback = sys.exc_info()
        traceback.print_exception(exc_type, exc_value, exc_traceback, limit=2, file=sys.stderr)
        return 1


if __name__ == '__main__':
    main()
