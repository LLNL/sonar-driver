#!/usr/bin/env python

import os
import sys
import time
import argparse
import traceback

import avro.schema

from sonar_driver.print_utils import pretty_print
from sonar_driver.connector import Connector
from sonar_driver.sonar_directory_source_config import SonarDirectorySourceConfig, FileFormat


def parse_args():
    """ Parse arguments """

    parser = argparse.ArgumentParser(
            description="Creates a ingestor from a directory source to a Cassandra table sink, "
                        "creating the table if it does not yet exist.",
            formatter_class=argparse.RawTextHelpFormatter)

    parser.add_argument('-g', '--debug', action="store_true", required=False,
            help="debug this script")
    parser.add_argument('-f', '--file-format', default="json", required=False,
            help="file format (json|csv)")
    parser.add_argument('-fo', '--format-options', default="{}", required=False,
            help="file format options")
    parser.add_argument('-t', '--tasks-max', default="1", required=False,
            help="maximum number of concurrent ingestion tasks")
    parser.add_argument('-n', '--topic-name', default=None, required=False,
            help="topic name for the ingestor (if unspecified, will be auto-generated with a unique name)")
    parser.add_argument('-b', '--batch-size', default="10000", required=False,
            help="batch size for file reads")

    parser.add_argument('ingest_dir', help="directory to use as ingestion point")
    parser.add_argument('completed_dir', help="directory to move ingested files into")
    parser.add_argument('avro_schema_file', help="avro schema of files in ingest_dir")

    args = parser.parse_args()

    if args.debug:
        pretty_print(args.__dict__, title="Arguments passed")

    return args


def main():
    """ Main entrypoint """

    args = parse_args()

    try:
        # Get avro schema from file
        with open(args.avro_schema_file, 'r') as f:
            avro_schema = avro.schema.Parse(f.read())
        if args.debug:
            pretty_print(avro_schema.to_json(), title="Avro schema")

        # Create unique topic if none specified
        if args.topic_name is None:
            args.topic_name = "t" + str(float(time.time())) + "-h" + str(hash(os.path.abspath(args.ingest_dir)))

        # Create the connector
        directory_source = Connector(
            "sonar_directory_source-" + args.topic_name,
            SonarDirectorySourceConfig(
                args.topic_name,
                args.ingest_dir,
                args.completed_dir,
                avro_schema,
                tasks_max=args.tasks_max,
                file_format=args.file_format,
                format_options=args.format_options,
                batch_size=args.batch_size
            )
        )
        
        pretty_print(directory_source.json(), colorize=False)

    except Exception as e:
        exc_type, exc_value, exc_traceback = sys.exc_info()
        traceback.print_exception(exc_type, exc_value, exc_traceback, limit=2, file=sys.stderr)
        return 1


if __name__ == '__main__':
    main()
